// This is the .proto file in Google Protocol Buffers format.
// When this file is compiled with Google Protocol Buffers compiler
// (https://code.google.com/p/protobuf/downloads/list), then Java/Python/C++
// code is generated which contains methods for serializing and deserializing
// the messages contained in this .proto file.

package StudioAPI.Proto;

option optimize_for = LITE_RUNTIME;
option java_package = "no.icd.studioapi.proto";
option java_outer_classname = "StudioAPI";

// Used in structure response message to indicate each node's type
enum CDPNodeType {
CDP_UNDEFINED = -1;
CDP_SYSTEM = 0;
CDP_APPLICATION = 1;
CDP_COMPONENT = 2;
CDP_OBJECT = 3;
CDP_MESSAGE = 4;
CDP_BASE_OBJECT = 5;
CDP_PROPERTY = 6;
CDP_SETTING = 7;
CDP_ENUM = 8;
CDP_OPERATOR = 9;
CDP_NODE = 10;
}

enum CDPMessageType {
eMessageTypeStructureRequest = 1;
eMessageTypeStructureResponse = 2;
eMessageTypeValueGetterRequest = 3;
eMessageTypeValueGetterResponse = 4;
eMessageTypeValueSetterRequest = 5;
eMessageTypeStructureChangeSubscription = 6;
eMessageTypeStructureChangeResponse = 7;
eMessageTypeOther = 8; // e.g. an empty message with only PBError in it
}

// Used to identify value type in messages
enum CDPValueType {
eUNDEFINED = 0;
eDOUBLE = 1;
eUINT64 = 2;
eINT64 = 3;
eFLOAT = 4;
eUINT = 5;
eINT = 6;
eUSHORT = 7;
eSHORT = 8;
eUCHAR = 9;
eCHAR = 10;
eBOOL = 11;
eSTRING = 12;
}

// used to indicate type of structure change in PBStructureChangeResponse
enum StructureChangeType {
  eChildAdded = 0;         // a (grand)child was added
  eChildRemoved = 1;       // a (grand)child was removed
  eSubscribedNodeLost = 2; // the node that was subscribed to no longer exists
}

// used as a container for all other messages so that StudioApiTransport class
// in StudioApiServer can determine the type of incoming message. See
// https://developers.google.com/protocol-buffers/docs/techniques, "Union types"
message PBContainer {
optional CDPMessageType messageType = 1;
optional PBError error = 2;
optional uint64 destIP = 3;
optional uint32 destPort = 4;
repeated uint32 structureRequest = 5;
optional PBValueRequest getterRequest = 6;
repeated PBVariantValue getterResponse = 7;
repeated PBVariantValue setterRequest = 8;
repeated PBNode structureResponse = 9;
optional PBStructureChangeSubscription structureChangeSubscription = 10;
repeated PBStructureChangeResponse structureChangeResponse = 11;
extensions 100 to max; // Allow external extensions
}

// used for error indication
message PBError {
required uint32 errorCode = 1;
optional string errorMessage = 2;
extensions 100 to max;
}

// nodeID is provided by each CDPProcess in CDPEngine to all it's nodes. nodeID range
// must be divided into four separate ranges determined by the two lowest bits for better encoding in protobuf
// b00 for high priority process b01 for normal and b10 for low - b11 is for all other threads and must implement locking for safe calls
message PBInfo {
required uint32 nodeID = 1; // Application wide unique ID for each instance in CDP structure
required string name = 2; // Local short name
required CDPNodeType nodeType = 3; // Direct base type, type of the class
optional CDPValueType valueType = 4; // Value primitive type the node holds if node may hold a value
optional string typeName = 5; // Real class name
optional string serverAddr = 6; // If this node signifies another CDP application,
                                   // this field will be the IP of said application's StudioAPIServer
optional uint32 serverPort = 7; // .. and this is the port of the application's StudioAPIServer
optional bool isResponder = 8; // if multiple applications are sent back from the server,
                               // this flag is set to true for the app that the data was requested from
optional bool valueIsPersistent = 9; // if this flag is true, the node's value is stored in XML
optional bool valueIsReadOnly = 10; // if this flag is true, the node value can not be written to
extensions 100 to max; // Allow external extensions to Info message
}

message PBVariantValue {
required uint32 nodeID = 1; // The node ID to whom this value belongs to
optional double dValue = 2; // Variant value
optional float fValue = 3; // Variant value
optional uint64 ui64Value = 4; // Variant value
optional sint64 i64Value = 5; // Variant value
optional uint32 uiValue = 6; // Variant value
optional sint32 iValue = 7; // Variant value
optional uint32 usValue = 8; // Variant value, uint used as ushort (which protobuf doesnt have)
optional sint32 sValue = 9; // Variant value, int used as short
optional uint32 ucValue = 10; // Variant value, uint used as uchar
optional sint32 cValue = 11; // Variant value, int used as char
optional bool bValue = 12; // Variant value
optional string strValue = 13; // Variant value
optional double timeStamp = 14; // Source may provide timeStamp for sent value
extensions 100 to max; // Allow external extensions to PBValueRequest message
}
//
// Messages on the wire
//
//Element of CDPApplication structure response. Structure responses are uniform
// across all levels of system - PBNode message may contain e.g. info about
// applications in LAN or about CDPProperties in a CDPComponent
message PBNode {
required PBInfo info = 1;
repeated PBNode node = 2;
extensions 100 to max; // Allow external extensions to PBNode message
}
// EventValue & PeriodicValue Request
message PBValueRequest {
repeated uint32 nodeID = 1; // List of node IDs whose value are requested
optional double fs = 2; // If present indicates that values expected no more often than provided FS rate
                        // (server will accumulate and time-stamp values if they occur more often)
optional bool stop = 3; // If true target must stop updates on the provided values else this is start
extensions 100 to max; // Allow external extensions to PBValueRequest message
}

message PBStructureChangeSubscription {
repeated uint32 nodeID = 1;
optional uint32 depth = 2; /* if 0, all child (and their children) node changes are reported; if 1,
                              only current nodeâ€™s deletion is reported */
optional bool stop = 3; // stop subscription to node
extensions 100 to max;
}

message PBStructureChangeResponse {
required StructureChangeType changeType = 1; // type of structure change
optional uint32 nodeID = 2;      // nodeID that subscription was made to
optional double timestamp = 3;   // timestamp of change event
optional PBNode changedNode = 4; // if (grand)child is added/removed,
                                 // this PBNode describes the structure of its parent
optional uint32 changedChildID = 5; // this id identifies the child of the previous PBNode which was added
                                    // or removed. in the latter case this node no longer exists remotely
optional string changer = 6;     // identifies the client who performed the structure change
extensions 100 to max;
}

// ApplicationsInfo also needs to be provided. Application can provide information about other application IPs and PORTs it knows about
// and needs to provide it's startUpTimestamp for valueChange timestamps to make sense to user.
